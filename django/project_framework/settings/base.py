"""
Django settings for Dockerized Django project.

Generated by 'django-admin startproject' using Django 3.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from datetime import timedelta
from django.contrib.messages import constants as message_constants
from .env import env

# Set project directory and base directory.
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

APPLICATION_NAME = env.str("APPLICATION_NAME", default="Dockerized Django")
APPLICATION_ID = env.str("APPLICATION_ID", default="dockerizeddjango")

SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production! False if not in os.environ because of casting above
DEBUG = env('DEBUG', default=False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])

# Application definitions
INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
]

# Custom based django apps definition with urls.py base url.
CUSTOM_APPS = {
	'core': 'core',
}

# Appeding custom apps to Django installed apps.
INSTALLED_APPS += CUSTOM_APPS.keys()

# Enable Django REST framework - https://www.django-rest-framework.org
ENABLE_DRF = env.bool("ENABLE_DRF", default=False)
if ENABLE_DRF:
	INSTALLED_APPS += [
		'corsheaders',
		'rest_framework',
		'api_core',
	]

	REST_FRAMEWORK = {
		'DEFAULT_AUTHENTICATION_CLASSES': [
			'rest_framework_simplejwt.authentication.JWTAuthentication',
		],
		'DEFAULT_RENDERER_CLASSES': [
			'api_core.renderers.WrappedJSONRenderer',
		],
		'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    	'PAGE_SIZE': 10,
	    'DATETIME_FORMAT': '%Y-%m-%d %I:%M %p',
		'DATE_FORMAT': '%Y-%m-%d',
		'TIME_FORMAT': '%I:%M %p',
	}

	SIMPLE_JWT = {
		"ACCESS_TOKEN_LIFETIME": timedelta(days=1),
		"REFRESH_TOKEN_LIFETIME": timedelta(days=1),
		"ROTATE_REFRESH_TOKENS": False,
		"BLACKLIST_AFTER_ROTATION": False,
		"UPDATE_LAST_LOGIN": False,

		"ALGORITHM": "HS256",
		"SIGNING_KEY": SECRET_KEY,
		"VERIFYING_KEY": "",
		"AUDIENCE": None,
		"ISSUER": None,
		"JSON_ENCODER": None,
		"JWK_URL": None,
		"LEEWAY": 0,

		"AUTH_HEADER_TYPES": ("Bearer",),
		"AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
		"USER_ID_FIELD": "id",
		"USER_ID_CLAIM": "user_id",
		"USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

		"AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
		"TOKEN_TYPE_CLAIM": "token_type",
		"TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

		"JTI_CLAIM": "jti",

		"SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
		"SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
		"SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

		"TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
		"TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
		"TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
		"TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
		"SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
		"SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
	}

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if "corsheaders" in INSTALLED_APPS:
	MIDDLEWARE.append('corsheaders.middleware.CorsMiddleware')
	
	CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=['*'])


ROOT_URLCONF = 'project_framework.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(PROJECT_DIR, 'templates/')],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'project_framework.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
	'default': env.db(),
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = env.str('TIME_ZONE', default='UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = (
    os.path.join(PROJECT_DIR, 'static'),
)

# Media files (images, videos, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django logging configuration with rotating file handler.
# https://docs.djangoproject.com/en/3.2/topics/logging/

ENABLE_LOGGING = env.bool('ENABLE_LOGGING', default=True)
if ENABLE_LOGGING:
	# Get logging directory from env file, or set default 'logs'.
	LOGGING_DIR = os.path.join(BASE_DIR, env.str('LOGGING_DIR', default='logs'))
	if not os.path.exists(LOGGING_DIR):
		os.makedirs(LOGGING_DIR)

	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		'formatters': {
			'standard': {
				'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
				'datefmt': "%d/%b/%Y %H:%M:%S"
			},
		},
		'handlers': {
			'logfile': {
				'level': 'DEBUG',
				'class': 'logging.handlers.TimedRotatingFileHandler',
				'filename': os.path.join(LOGGING_DIR, 'django.log'),
				'when': 'D',  # this specifies the interval
				'interval': 1,  # defaults to 1, only necessary for other values
				'backupCount': 30,  # how many backup file to keep, 30 days
				'formatter': 'standard',
			},
			'console': {
				'level': 'INFO',
				'class': 'logging.StreamHandler',
				'formatter': 'standard'
			},
		},
		'loggers': {
			'django': {
				'handlers': ['console'],
				'propagate': True,
				'level': 'WARN',
			},
			'django.db.backends': {
				'handlers': ['console'],
				'level': 'DEBUG',
				'propagate': False,
			},
			APPLICATION_NAME: {
				'handlers': ['console', 'logfile'],
				'level': 'DEBUG',
			},
		}
	}

	# Enable automatic logging of Django exceptions
	ENABLE_AUTO_LOGGING = env.bool('ENABLE_AUTO_LOGGING', default=True)
	if ENABLE_AUTO_LOGGING:
		MIDDLEWARE += ['project_framework.core.middleware.auto_logging_middleware.ExceptionAutoLoggingMiddleware']

# Enable Django Debug Toolbar
ENABLE_DEBUG_TOOLBAR = env.bool('ENABLE_DEBUG_TOOLBAR', default=False)
if ENABLE_DEBUG_TOOLBAR:
	INSTALLED_APPS += [
		'debug_toolbar',
	]
	MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware', ]
	DEBUG_TOOLBAR_CONFIG = {
		"SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG,
	}

# This sets the mapping of message level to message tag,
# which is typically rendered as a CSS class in HTML. 
MESSAGE_TAGS = {
    message_constants.DEBUG: 'debug',
    message_constants.INFO: 'info',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning',
    message_constants.ERROR: 'danger',
}

ENABLE_CELERY = env.bool('ENABLE_CELERY', default=False)
if ENABLE_CELERY:
	CELERY_BROKER_URL = env.str('CELERY_BROKER_URL', default='amqp://guest:guest@localhost:5672//')
	CELERY_RESULT_BACKEND = env.str('CELERY_RESULT_BACKEND', default='redis://localhost/0')
	INSTALLED_APPS += [
		'django_celery_beat'
	]
	CELERY_TIMEZONE = TIME_ZONE
	CELERY_ACCEPT_CONTENT = ['json']
	CELERY_TASK_SERIALIZER = 'json'
	CELERY_RESULT_SERIALIZER = 'json'
	CELERY_IGNORE_RESULT = False # this is less important
	CELERY_DEFAULT_DELIVERY_MODE = "persistent"
	CELERY_RESULT_EXPIRES = 1800

# Custom project additions.
if APPLICATION_ID == "dockerizeddjango":
	from .project.dockerizeddjango import *
	CUSTOM_APPS.update(DOCKERIZEDDJANGO_CUSTOM_APPS)
	INSTALLED_APPS += DOCKERIZEDDJANGO_INSTALLED_APPS
	INSTALLED_APPS += DOCKERIZEDDJANGO_CUSTOM_APPS.keys()

